

//-------------------------------------------------------------------------------------------------------

// homework_3


/*
Создать класс Card, описывающий карту в игре БлэкДжек. У этого класса должно быть три поля: масть, значение карты и положение карты (вверх лицом или рубашкой). 
Сделать поля масть и значение карты типом перечисления (enum). Положение карты - тип bool. Также в этом классе должно быть два метода: 
метод Flip(), который переворачивает карту, т.е. если она была рубашкой вверх, то он ее поворачивает лицом вверх, и наоборот.
метод GetValue(), который возвращает значение карты, пока можно считать, что туз = 1.

*/

class Card
{
public:
	enum Suit
	{
		hearts,
		diamonds,
		clubs,
		spades

	};

	enum Value
	{
		ace=1,
		two,
		three,
		four,
		five,
		six,
		seven,
		eight,
		nine,
		ten,
		junior=10,
		queen=10,
		king=10
	};

	Suit m_suit;
	Value m_value;
	bool m_turn = false;

public:
	Card(Value value, Suit suit)
		:m_value(value), m_suit(suit)
	{

	}

	void flip()
	{
		m_turn = !m_turn;
	}

	Value getValue()
	{
		return m_value;
	}

	void print()
	{
		std::cout << m_turn << std::endl;
	}
	
};

//---------------------------------------------------------------------------------------------------------------------------
//homework_4

// Task 3

/*
Реализовать класс Hand, который представляет собой коллекцию карт. 
В классе будет одно поле: вектор указателей карт (удобно использовать вектор, т.к. это по сути динамический массив, 
а тип его элементов должен быть - указатель на объекты класса Card). Также в классе Hand должно быть 3 метода:
метод Add, который добавляет в коллекцию карт новую карту, соответственно он принимает в качестве параметра указатель на новую карту
метод Clear, который очищает руку от карт
метод GetValue, который возвращает сумму очков карт руки (здесь предусмотреть возможность того, что туз может быть равен 11).
*/

class Hand
{
private:
	std::vector<Card> m_hand;
public:
	// Hand(Card &card)
	// {
	// 	m_hand[m_hand.size()] = card;
	// }

	void Add(Card &card)
	{
		m_hand.push_back(card);
	}

	void Clear()
	{
		m_hand.clear();
	}

	int getValue()
	{
		int value = 0;
		int size = m_hand.size();
		for (int i = 0; i < size; ++i)
		{
			int card = m_hand[i].getValue();
			if(card == 1 && value + 11 <=21)
			{
				card = 11;
			}
			value += card;
		}

		return value;
	}
	
};



